ใช้แบบมีตัวกลาง(Choreography)

flow การทำงานคือ การโอนเงิน

	ผู้ใช้ต้องการโอนเงิน -> ถอนเงินจากบัญชีต้นทาง -> ฝากเงินเข้าบัญชีปลายทาง -> บันทึกการทำธุรกรรม
			|		   |	             |
			db		   db		     db



	(success case) เมื่อผู้ใช้ง่ายต้องการโอนเงินก็จะสร้าง event การโอนเงินขึ้นมา (Tx1) จากนั้น event ก็จะถูก consume จาก service ปลายทางที่สนใจ
			เมื่อ cousume ไปแล้ว ก็จะเกิด local Tx เช่น

			(Tx2)withdraw service ก็จะทำการถอนเงิน และบันทึกลง dbตัวเอง 

			(Tx3)deposit service ก็จะทำการฝากเงิน และบันทึกลง dbตัวเอง 

			จากนั้นแต่ละ service ก็จะสร้าง event ขึ้นมา ...และ serviceปลายทาง(Report service) ก็จะ consume event ^ (Tx4)

			สังเกตุว่า แต่ละ service จะผูกกันแค่ event เท่านั้น และทำงานเป็นลำดับ ต่อเนื่องกันไป  โดยจะเกิด Tx ทั้งหมด 4 Tx และ 4 event

			และทั้ง 4 event จะถูกเรียกว่า event store โดยจะถูกจัดเก็บเรียงลำดับกันตามเวลา ....แล้วจะรู้ได้ยังว่า Tx ที่ต่อเนื่องกันนั้นคือของคนๆนั้น => คือจะมีการเพิ่ม UUID เข้าไประบุในแต่ละ event
			ดังนั้นจึงตรวจสอบได้ทันทีว่าเมื่อขั้นตอนการทำงานสำเร็จ ต้องมี event ที่มี UUID เดียวกัน จึงเกิดความสัมพันธ์กัน เพื่อมา query ได้ง่ายขึ้น



	(fail case) เช่น ถอนเงินสำเร็จ แต่ฝากเงินไม่สำเร็จ  จะจัดการอย่างไร ?
			ก็ใน service ในการฝากเงิน จะจัดการ Tx ตัวเองให้เรียบร้อยก่อน จากนั้นก็จะสร้าง eventว่าไม่สำเร็จ ขึ้นมา และรอ service ที่สนใจ event นี้ ก็ consume ไป 
				ซึ่งประเด็นคือ ทั้ง report service และ withdraw service consume event นี้ไปแล้ว จะต้องทำอย่างไรบ้าง => rollback ไหม หรือ ต้องทำอย่างไร ... (เรียกว่า consistency pattern)



	consistency pattern 5 รูปแบบ
		1 compensating action => undo หรือ ยกเลิกการทำงานก่อนหน้าทิ้งไป
		2 Retry => ทำซ้ำไปจนกว่าจะ success หรือ time out 
		3 ignore => ไม่ทำอะไร 
		4 restart => reset และกลับไปจุดเริ่มต้นก่อนเกิด Tx นี้
		5 Tentative operation => ไม่ลบ แต่จะ update status ที่เกิดขึ้นมาแล้ว

	โดยจะต้องเลือกให้เหมาะสมกับ bussiness  


ข้อเสีย
 -เกิดความซับซ้อน
- พัฒนา ทดสอบยาก 
- หาต้นเหตุของปัญหายากมากกกกกกก => ต้องสร้างระบบ observer / monitor มาช่วย

	



		